import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenLocal()
        maven { url = "http://repo.grails.org/grails/core" }
    }

    dependencies {
        classpath "org.grails:grails-docs:${project.ext.properties.grailsDocsVersion ?: project.'grails.version'}"
        classpath 'org.codehaus.groovy:groovy-all:2.4.0'
        classpath "org.grails:gdoc-to-asciidoc:1.0.1"
        classpath "org.codehaus.groovy:groovy-json:2.4.0"
    }
}

plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
}

asciidoctorj {
    version = '1.5.4'
}

apply plugin: "base"
apply plugin: "org.grails.grails-gdoc-to-asciidoc"

version = project.getProperty("grails.version")

archivesBaseName = "grails-docs"

ext.checkOutDir = "${buildDir.path}/checkout"
ext.outputDir = "${buildDir.path}/docs"
ext.githubBranch = project.hasProperty("githubBranch") ? project.getProperty("githubBranch") : "4.0.x"
ext.guidePage = "/docs/guide/single.html"
ext.indexPage = "/docs/index.html"

ext.explicitGrailsHome = System.getProperty("grails.home") ?: (project.hasProperty('grails.home') ? project.getProperty("grails.home") : null)
ext.grailsHome = explicitGrailsHome ? file(explicitGrailsHome).absolutePath : "$checkOutDir/grails-src"
ext.projectVersion = project.version

configurations {
    publish
}

gdoc2asciidoc {
    apiLinks = ['org.hibernate':'http://docs.jboss.org/hibernate/orm/current/javadocs/',
                'org.springframework.boot':'http://docs.spring.io/spring-boot/docs/2.1.x/api',
                'org.springframework':'http://docs.spring.io/spring/docs/current/javadoc-api/',
                'javax.servlet':'http://docs.oracle.com/javaee/1.4/api/',
                'java.':'http://docs.oracle.com/javase/6/docs/api/',
                'groovy.':'http://docs.groovy-lang.org/docs/latest/html/api/',
                'org.codehaus.groovy.grails':"http://docs.grails.org/$githubBranch/api",
                'grails.orm.':'http://gorm.grails.org/latest/api',
                'grails.gorm.':'http://gorm.grails.org/latest/api',
                'grails.':"http://docs.grails.org/$githubBranch/api",
                'org.grails.':"http://docs.grails.org/$githubBranch/api"
    ]
    resourcesDir = file("resources")
    srcDir = file("src/en")
}

task buildscriptDependencies(type: DependencyReportTask) {
    configurations = [buildscript.configurations.classpath]
}

// use jsoup in PdfBuilder for cleaning input html
System.setProperty('grails.docs.clean.html','true')
// creates single.html.before.xml and single.html.after.xml files for debugging pdf input when enabled
//System.setProperty('grails.docs.debug.pdf','true')

task fetchGrailsSource {
    doLast {
        ant.mkdir dir: checkOutDir

        println "Downloading Grails source code. If you already have a copy " +
                "of the Grails source code checked out you can avoid this download " +
                "by setting the grails.home system property to point to your local " +
                "copy of the source. See README.md for more information."


        def zipFile = "${checkOutDir}/grails-src.zip"

        def tag = System.getenv('TRAVIS_TAG')
        if(tag) {
            ant.get src: "https://github.com/grails/grails-core/archive/${tag}.zip", dest: zipFile, verbose: true
        }
        else {
            ant.get src: "http://github.com/grails/grails-core/zipball/${githubBranch}", dest: zipFile, verbose: true
        }
    
        ant.unzip src: zipFile, dest: checkOutDir, {
             mapper type: "regexp", from: "(grails-core-\\S*?/)(.*)", to: "grails-src/\\2"
        }

        ant.chmod(file:"${checkOutDir}/grails-src/gradlew", perm:700)

        println "Grails source code has been downloaded to ${relativePath(grailsHome)}"
    }
}

fetchGrailsSource.onlyIf {
    println "GRAILS HOME=$explicitGrailsHome"
    return !explicitGrailsHome
}

task apiDocs(type: Exec, dependsOn: 'fetchGrailsSource') {
    String command = "./gradlew"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        command = "gradlew.bat"
    }

    commandLine = [command, "groovydoc", '--info', '--stacktrace']
    workingDir = grailsHome
    environment "GRADLE_OPTS", "-Xmx2048m -Xms256m -XX:MaxPermSize=512m -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError"
}

asciidoctor {
    resources {
        from('resources')
    }

    options template_dirs: ["${projectDir}/src/docs/templates"]

    attributes 'experimental'  : 'true',
               'compat-mode'   : 'true',                              
               'icons'         : 'font',
               'linkcss'       : 'true',     
               'docinfo1'      : '',   
               'toc'           : 'left',  
                // stylesdir: "${projectDir}/resources/css",
                // stylesheet: 'style.css',               
               'version'       : project.version,
               'sourcedir'     : "$checkOutDir/grails-src"
}


asciidoctor.dependsOn(apiDocs)

apiDocs.onlyIf { !System.getProperty("disable.groovydocs") }

task copyApiDocs(type: Copy) {
    from "${project.grailsHome}/doc/api"
    into "${outputDir}/api"
}

task migrate(type: grails.doc.gradle.MigrateLegacyDocs)

task publishGuide(type: grails.doc.gradle.PublishGuide, dependsOn: ['apiDocs', 'copyApiDocs']) {
    def searchDirs = project.file(project.grailsHome).listFiles().findAll {
        new File(it, "src/main/groovy/org/grails").exists()
    }.collect {
        new File(it, "src/main/groovy/org/grails")
    }

    // No language setting because we want the English guide to be
    // generated with a 'en' in the path, but the source is in 'en'
    // so that it's easy to track with git.
    sourceRepo = "https://github.com/grails/grails-doc/edit/$githubBranch/src/en"
    sourceDir = new File(projectDir, "src/en")
    propertiesFiles = [ new File(projectDir, "gradle.properties") ]
    asciidoc = true
    properties = [        
        'javaee': 'https://docs.oracle.com/javaee/7/api/',
        'javase': 'https://docs.oracle.com/javase/7/docs/api/',
        'groovyapi': 'http://docs.groovy-lang.org/latest/html/gapi/',
        'springapi': 'https://docs.spring.io/spring/docs/current/javadoc-api/',
        'asyncdocs': 'http://async.grails.org/latest',
        'asyncApiDocs': 'http://async.grails.org/latest/api/',
        'gspdocs': 'http://gsp.grails.org/latest',
        'gspApiDocs': 'http://gsp.grails.org/latest/api/',
        'gormApiDocs': 'http://gorm.grails.org/latest/api/',
        'springbootapi' :'http://docs.spring.io/spring-boot/docs/2.1.x/api',
        'springBootReference' :'http://docs.spring.io/spring-boot/docs/2.1.x/reference'
    ]
    macros = [ new grails.doc.macros.GspTagSourceMacro(searchDirs) ]
}

task publishPdf(type: grails.doc.gradle.PublishPdf, dependsOn: ['publishGuide'])

task docs(dependsOn: ['publishPdf']) {
    finalizedBy 'createReleasesDropdown'
}

task dist(type: Zip, dependsOn: 'docs') {
    from outputDir
}

task createReleasesDropdown(dependsOn: 'docs') {
    mustRunAfter 'dist'
    group = 'documentation'
    description = 'Fetches the releases of a github project via Github v3 API, it then creates an HTML select to change between versions published in github pages'
    doLast {
        String slug = githubSlug as String
        String repo = slug.split('/')[1]
        JsonSlurper slurper = new JsonSlurper()
        String json = new URL("https://api.github.com/repos/${slug}/releases").text
        def result = slurper.parseText(json)
        String selectHtml = "<span style='width:100px;display:inline-block;'><select onChange='window.document.location.href=this.options[this.selectedIndex].value;'>"
        result
                .collect { SoftwareVersion.build(it.tag_name.replace('v', '')) }
                .sort()
                .reverse()
                .each { softwareVersion ->
                    String versionName = softwareVersion.versionText
                    String href = "https://${slug.split('/')[0]}.github.io/${repo}/${versionName}/guide/index.html"
                    if (slug == 'grails/grails-core') {
                        href = "https://docs.grails.org/${versionName}/guide/single.html"
                    }
                    selectHtml += "<option value='${href}' ${(versionName == project.'grails.version') ? 'selected' : ''}>${versionName}</option>"
                }
        selectHtml += '</select></span>'
        File guide = new File(rootProject.buildDir.getAbsolutePath() + guidePage)
        File index = new File(rootProject.buildDir.getAbsolutePath() + indexPage)
        String tocHtml = '<div id="table-of-content">'
        String replacement = "${selectHtml}</li><li>$tocHtml"
//        guide.text = guide.text.replace(tocHtml, replacement)
        String versionHtml = "<p><strong>Version:</strong> ${projectVersion}</p>"
        String versionWithSelectHtml = "<p><strong>Version:</strong> ${selectHtml}</p>"
        guide.text = guide.text.replace(versionHtml, versionWithSelectHtml)
        index.text = index.text.replace(versionHtml, versionWithSelectHtml)
    }
    onlyIf {
        new File(rootProject.buildDir.getAbsolutePath() + guidePage).exists() &&
        new File(rootProject.buildDir.getAbsolutePath() + indexPage).exists()
    }
}

artifacts {
    archives dist
}


class Snapshot implements Comparable<Snapshot> {

    private String text

    int getMilestoneVersion() {
        text.replace("M", "").toInteger()
    }

    int getReleaseCandidateVersion() {
        text.replace("RC", "").toInteger()
    }

    boolean isBuildSnapshot() {
        text == "BUILD-SNAPSHOT"
    }

    boolean isReleaseCandidate() {
        text.startsWith("RC")
    }

    boolean isMilestone() {
        text.startsWith("M")
    }

    Snapshot(String text) {
        this.text = text
    }

    @Override
    int compareTo(Snapshot o) {

        if (this.buildSnapshot && !o.buildSnapshot) {
            return 1
        } else if (!this.buildSnapshot && o.buildSnapshot) {
            return -1
        } else if (this.buildSnapshot && o.buildSnapshot) {
            return 0
        }

        if (this.releaseCandidate && !o.releaseCandidate) {
            return 1
        } else if (!this.releaseCandidate && o.releaseCandidate) {
            return -1
        } else if (this.releaseCandidate && o.releaseCandidate) {
            return this.releaseCandidateVersion <=> o.releaseCandidateVersion
        }

        if (this.milestone && !o.milestone) {
            return 1
        } else if (!this.milestone && o.milestone) {
            return -1
        } else if (this.milestone && o.milestone) {
            return this.milestoneVersion <=> o.milestoneVersion
        }

        return 0
    }
}

class SoftwareVersion implements Comparable<SoftwareVersion> {

    int major
    int minor
    int patch

    Snapshot snapshot

    String versionText

    static SoftwareVersion build(String version) {
        String[] parts = version.split("\\.")
        SoftwareVersion softVersion
        if (parts.length >= 3) {
            softVersion = new SoftwareVersion()
            softVersion.versionText = version
            if (parts.length > 3) {
                softVersion.snapshot = new Snapshot(parts[3])
            }
            softVersion.major = parts[0].toInteger()
            softVersion.minor = parts[1].toInteger()
            softVersion.patch = parts[2].toInteger()
        }
        softVersion
    }

    boolean isSnapshot() {
        snapshot != null
    }

    @Override
    int compareTo(SoftwareVersion o) {
        int majorCompare = this.major <=> o.major
        if (majorCompare != 0) {
            return majorCompare
        }

        int minorCompare = this.minor <=> o.minor
        if (minorCompare != 0) {
            return minorCompare
        }

        int patchCompare = this.patch <=> o.patch
        if (patchCompare != 0) {
            return patchCompare
        }

        if (this.isSnapshot() && !o.isSnapshot()) {
            return -1
        } else if (!this.isSnapshot() && o.isSnapshot()) {
            return 1
        } else if (this.isSnapshot() && o.isSnapshot()) {
            return this.getSnapshot() <=> o.getSnapshot()
        } else {
            return 0
        }
    }
}
